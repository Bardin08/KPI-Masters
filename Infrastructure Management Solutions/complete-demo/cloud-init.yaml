#cloud-config
package_update: true
package_upgrade: true

packages:
  - docker.io
  - docker-compose-plugin
  - curl
  - git

runcmd:
  # Enable and start Docker
  - systemctl enable docker
  - systemctl start docker
  - usermod -aG docker ubuntu

  # Create project directory
  - mkdir -p /opt/devops-demo
  - cd /opt/devops-demo

  # Create directory structure
  - mkdir -p nginx app fluentd prometheus grafana/provisioning/datasources grafana/provisioning/dashboards

  # Decode and write docker-compose.yaml
  - echo "${docker_compose_content}" | base64 -d > docker-compose.yaml

  # Decode and write nginx config
  - echo "${nginx_config_content}" | base64 -d > nginx/nginx.conf

  # Decode and write prometheus config
  - echo "${prometheus_config}" | base64 -d > prometheus/prometheus.yml

  # Decode and write Node.js app
  - echo "${app_js_content}" | base64 -d > app/app.js

  # Decode and write Fluentd config
  - echo "${fluent_conf_content}" | base64 -d > fluentd/fluent.conf
  - echo "${fluentd_dockerfile}" | base64 -d > fluentd/Dockerfile

  # Create Grafana datasource config
  - |
    cat > grafana/provisioning/datasources/prometheus.yml << 'EOF'
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
    EOF

  # Create basic Grafana dashboard
  - |
    cat > grafana/provisioning/dashboards/dashboard.yml << 'EOF'
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        options:
          path: /etc/grafana/provisioning/dashboards
    EOF

  # Change ownership to ubuntu user
  - chown -R ubuntu:ubuntu /opt/devops-demo

  # Start services
  - cd /opt/devops-demo
  - docker compose up -d

  # Create systemd service for auto-start
  - |
    cat > /etc/systemd/system/devops-demo.service << 'EOF'
    [Unit]
    Description=DevOps Demo Stack
    Requires=docker.service
    After=docker.service

    [Service]
    Type=oneshot
    RemainAfterExit=yes
    WorkingDirectory=/opt/devops-demo
    ExecStart=/usr/bin/docker compose up -d
    ExecStop=/usr/bin/docker compose down
    TimeoutStartSec=0

    [Install]
    WantedBy=multi-user.target
    EOF

  - systemctl enable devops-demo.service

write_files:
  - path: /opt/devops-demo/README.md
    content: |
      # DevOps Demo Stack
      
      ## Services:
      - Main App: http://your-server-ip/
      - Grafana: http://your-server-ip/grafana/ (admin:admin)
      - Kibana: http://your-server-ip/kibana/
      - Prometheus: http://your-server-ip/prometheus/
      
      ## Management:
      ```bash
      cd /opt/devops-demo
      docker compose up -d    # Start all services
      docker compose down     # Stop all services
      docker compose logs -f  # View logs
      ```